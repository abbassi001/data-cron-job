#!/bin/bash

# ============================================================
# SCRIPT PRINCIPAL - ORCHESTRATEUR DE TOUT LE PROCESSUS
# ============================================================
# Ce script unique lance l'ensemble du processus :
# 1. Configuration initiale
# 2. T√©l√©chargement massif de donn√©es
# 3. Traitement et analyse avanc√©e des donn√©es
# 4. G√©n√©ration de rapports avec visualisations
# 5. Versionning Git
# 6. Envoi de notifications Discord avec graphiques
# ============================================================

# Fonction pour afficher un texte en figlet si disponible
show_figlet() {
    local text="$1"
    if command -v figlet &> /dev/null; then
        figlet -f standard "$text"
    else
        echo ""
        echo "=== $text ==="
        echo ""
    fi
}

# Afficher le titre du projet
show_figlet "Data Process"
echo "============================================================"
echo "  SYST√àME AVANC√â DE TRAITEMENT DE DONN√âES MASSIVES"
echo "============================================================"
echo ""

# === CONFIGURATION ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
DATA_DIR="$PROJECT_DIR/data"
RAW_DIR="$DATA_DIR/raw"
PROCESSED_DIR="$DATA_DIR/processed"
REPORT_DIR="$DATA_DIR/reports"
VISUALIZATION_DIR="$DATA_DIR/visualizations"
LOG_DIR="$PROJECT_DIR/logs"
DATE=$(date +%Y-%m-%d)
LOG_FILE="$LOG_DIR/complet_$DATE.log"
EMAIL="abbassiadamou55@gmail.com" # √Ä modifier avec votre email

# Configuration Discord - URL du webhook (√† modifier avec votre URL)
DISCORD_WEBHOOK="https://discord.com/api/webhooks/VOTRE_WEBHOOK_ICI"

# V√©rifier que le script est ex√©cut√© depuis le r√©pertoire du projet
cd "$PROJECT_DIR" || {
  echo "Erreur: Impossible d'acc√©der au r√©pertoire du projet: $PROJECT_DIR"
  exit 1
}

# === INITIALISATION ===
# Cr√©er les r√©pertoires n√©cessaires
mkdir -p "$RAW_DIR" "$PROCESSED_DIR" "$REPORT_DIR" "$VISUALIZATION_DIR" "$LOG_DIR"

# Initialiser le journal
echo "===== D√âBUT DU PROCESSUS COMPLET: $(date '+%Y-%m-%d %H:%M:%S') =====" | tee -a "$LOG_FILE"
echo "üë®‚Äçüíª Script lanc√© par: $(whoami)" | tee -a "$LOG_FILE"
echo "üìÇ R√©pertoire du projet: $PROJECT_DIR" | tee -a "$LOG_FILE"

# V√©rification de l'environnement
show_figlet "Check Env"
echo "--- V√©rification de l'environnement ---" | tee -a "$LOG_FILE"
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version)
    echo "‚úÖ Python install√©: $PYTHON_VERSION" | tee -a "$LOG_FILE"
else
    echo "‚ùå Python non install√©. Installation requise." | tee -a "$LOG_FILE"
    exit 1
fi

if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version)
    echo "‚úÖ Git install√©: $GIT_VERSION" | tee -a "$LOG_FILE"
    GIT_ENABLED=true
    GIT_BRANCH="data-updates"
else
    echo "‚ö†Ô∏è Git non install√©. Le versionning ne sera pas disponible." | tee -a "$LOG_FILE"
    GIT_ENABLED=false
fi

# V√©rifier les d√©pendances Python
echo "--- V√©rification des d√©pendances Python ---" | tee -a "$LOG_FILE"
python3 -c "import pandas" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå Pandas non install√©. Installation en cours..." | tee -a "$LOG_FILE"
    pip install pandas || {
        echo "‚ùå √âchec de l'installation de pandas. Veuillez l'installer manuellement." | tee -a "$LOG_FILE"
        exit 1
    }
else
    echo "‚úÖ Pandas install√©" | tee -a "$LOG_FILE"
fi

python3 -c "import matplotlib" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå Matplotlib non install√©. Installation en cours..." | tee -a "$LOG_FILE"
    pip install matplotlib || {
        echo "‚ùå √âchec de l'installation de matplotlib. Veuillez l'installer manuellement." | tee -a "$LOG_FILE"
        exit 1
    }
else
    echo "‚úÖ Matplotlib install√©" | tee -a "$LOG_FILE"
fi

python3 -c "import seaborn" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå Seaborn non install√©. Installation en cours..." | tee -a "$LOG_FILE"
    pip install seaborn || {
        echo "‚ùå √âchec de l'installation de seaborn. Les visualisations seront limit√©es." | tee -a "$LOG_FILE"
    }
else
    echo "‚úÖ Seaborn install√©" | tee -a "$LOG_FILE"
fi

python3 -c "import scipy" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå SciPy non install√©. Installation en cours..." | tee -a "$LOG_FILE"
    pip install scipy || {
        echo "‚ùå √âchec de l'installation de scipy. Certaines analyses statistiques seront limit√©es." | tee -a "$LOG_FILE"
    }
else
    echo "‚úÖ SciPy install√©" | tee -a "$LOG_FILE"
fi

python3 -c "import requests" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå Requests non install√©. Installation en cours..." | tee -a "$LOG_FILE"
    pip install requests || {
        echo "‚ùå √âchec de l'installation de requests. Les notifications Discord ne fonctionneront pas." | tee -a "$LOG_FILE"
    }
else
    echo "‚úÖ Requests install√©" | tee -a "$LOG_FILE"
fi

# === FONCTIONS UTILITAIRES ===
# Script Python pour envoyer des notifications Discord avec graphiques
create_discord_script() {
    local DISCORD_SCRIPT="$SCRIPT_DIR/send_discord_with_charts.py"
    
    echo "üìù Cr√©ation du script d'envoi Discord..." | tee -a "$LOG_FILE"
    
    cat > "$DISCORD_SCRIPT" << 'EOF'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import json
import requests
from datetime import datetime
from glob import glob
from pathlib import Path

def find_charts(report_dir):
    """
    Recherche les graphiques g√©n√©r√©s dans le r√©pertoire des rapports
    """
    # Recherche tous les types de graphiques possibles
    all_charts = []
    
    # Chercher dans le r√©pertoire des rapports
    all_charts.extend(list(Path(report_dir).glob("*_chart.png")))
    all_charts.extend(list(Path(report_dir).glob("*_correlation_heatmap.png")))
    all_charts.extend(list(Path(report_dir).glob("*_*_histogram.png"))) 
    all_charts.extend(list(Path(report_dir).glob("*_*_timeline.png")))
    all_charts.extend(list(Path(report_dir).glob("*_*_boxplot.png")))
    
    # Chercher aussi dans le r√©pertoire des visualisations
    viz_dir = Path(os.path.dirname(report_dir)) / "visualizations"
    if viz_dir.exists():
        all_charts.extend(list(viz_dir.glob("*.png")))
        
        # Priorit√© aux dashboards s'ils existent
        dashboards = list(viz_dir.glob("*_dashboard.png"))
        if dashboards:
            return str(dashboards[0])
    
    # Retourner le premier graphique trouv√©, s'il y en a
    if all_charts:
        return str(all_charts[0])
    return None

def send_discord_message(webhook_url, message, title=None, image_path=None):
    """
    Envoie un message √† Discord via un webhook, avec une image si fournie
    """
    # Pr√©parer le payload de base
    payload = {
        "content": message,
        "username": "Data Processing Bot"
    }
    
    # Envoyer l'image si sp√©cifi√©e
    files = {}
    if image_path and os.path.exists(image_path):
        try:
            files = {'file': (os.path.basename(image_path), open(image_path, 'rb'), 'image/png')}
            print(f"üìä Envoi de l'image: {image_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la lecture de l'image: {str(e)}")
            files = {}
    
    try:
        if files:
            # Si on envoie une image, on utilise multipart/form-data
            response = requests.post(
                webhook_url,
                data={"payload_json": json.dumps(payload)},
                files=files
            )
        else:
            # Sinon, on utilise application/json
            response = requests.post(
                webhook_url,
                json=payload
            )
        
        if response.status_code in [200, 204]:
            print(f"‚úÖ Message Discord envoy√© avec succ√®s!")
            return True
        else:
            print(f"‚ùå Erreur lors de l'envoi du message Discord: {response.status_code}")
            print(response.text)
            return False
    
    except Exception as e:
        print(f"‚ùå Exception lors de l'envoi du message Discord: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python3 send_discord_with_charts.py webhook_url message [image_path]")
        sys.exit(1)
    
    webhook_url = sys.argv[1]
    message = sys.argv[2]
    image_path = sys.argv[3] if len(sys.argv) > 3 else None
    
    # Si aucune image n'est sp√©cifi√©e mais que le r√©pertoire des rapports est d√©fini dans l'environnement
    if not image_path and "REPORT_DIR" in os.environ:
        image_path = find_charts(os.environ["REPORT_DIR"])
        if image_path:
            print(f"üîç Image trouv√©e automatiquement: {image_path}")
    
    success = send_discord_message(webhook_url, message, None, image_path)
    sys.exit(0 if success else 1)
EOF
    
    chmod +x "$DISCORD_SCRIPT"
    echo "‚úÖ Script d'envoi Discord cr√©√©: $DISCORD_SCRIPT" | tee -a "$LOG_FILE"
}

# Fonction pour envoyer une notification Discord avec rapport et graphique
notify_discord() {
    local message="$1"
    local title="$2"
    local image_path="$3"
    
    echo "üéÆ Tentative d'envoi de notification Discord: $message" | tee -a "$LOG_FILE"
    
    # Cr√©er le script Discord s'il n'existe pas d√©j√†
    if [ ! -f "$SCRIPT_DIR/send_discord_with_charts.py" ]; then
        create_discord_script
    fi
    
    # Si aucune image sp√©cifi√©e, chercher automatiquement
    if [ -z "$image_path" ]; then
        image_path=$(find "$REPORT_DIR" -name "*_correlation_heatmap.png" -o -name "*_chart.png" -o -name "*_histogram.png" -type f -mtime -1 | head -1)
        
        if [ -n "$image_path" ]; then
            echo "üîç Visualisation trouv√©e pour Discord: $image_path" | tee -a "$LOG_FILE"
        else
            echo "‚ö†Ô∏è Aucune visualisation r√©cente trouv√©e" | tee -a "$LOG_FILE"
        fi
    fi
    
    # Exporter la variable REPORT_DIR pour le script Python
    export REPORT_DIR
    
    # Envoyer la notification via le script Python
    if python3 "$SCRIPT_DIR/send_discord_with_charts.py" "$DISCORD_WEBHOOK" "$message" "$image_path"; then
        echo "‚úÖ Message Discord envoy√© avec succ√®s!" | tee -a "$LOG_FILE"
        return 0
    else
        echo "‚ùå √âchec de l'envoi du message Discord" | tee -a "$LOG_FILE"
        return 1
    fi
}

# Fonction pour g√©rer les erreurs et envoyer des notifications
handle_error() {
    local step="$1"
    local error_msg="$2"
    
    show_figlet "ERROR"
    echo "‚ùå ERREUR √† l'√©tape '$step': $error_msg" | tee -a "$LOG_FILE"
    
    # Envoyer notification Discord
    notify_discord "‚ùå Erreur processus de donn√©es - √âtape: $step\nLe processus a √©chou√© √† l'√©tape '$step': $error_msg. Voir $LOG_FILE pour plus de d√©tails."
    
    exit 1
}

# Script Python pour le traitement avanc√© des donn√©es
create_processing_script() {
    local PROCESSING_SCRIPT="$SCRIPT_DIR/process_data_advanced.py"
    
    echo "üìù Cr√©ation du script de traitement avanc√© des donn√©es..." | tee -a "$LOG_FILE"
    
    cat > "$PROCESSING_SCRIPT" << 'EOF'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script avanc√© de traitement des donn√©es ouvertes t√©l√©charg√©es.
Version am√©lior√©e avec meilleure gestion des gros fichiers et visualisations avanc√©es.
"""

import os
import sys
import logging
import datetime
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# Configuration
BASE_DIR = Path(__file__).parent.parent
DATA_DIR = BASE_DIR / "data"
RAW_DIR = DATA_DIR / "raw"
PROCESSED_DIR = DATA_DIR / "processed"
REPORT_DIR = DATA_DIR / "reports"
VISUALIZATION_DIR = DATA_DIR / "visualizations"
LOG_DIR = BASE_DIR / "logs"

# Configuration du logging
today = datetime.datetime.now().strftime("%Y-%m-%d")
log_file = LOG_DIR / f"process_advanced_{today}.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Cr√©er les r√©pertoires n√©cessaires
os.makedirs(PROCESSED_DIR, exist_ok=True)
os.makedirs(REPORT_DIR, exist_ok=True)
os.makedirs(VISUALIZATION_DIR, exist_ok=True)

def get_latest_files():
    """R√©cup√®re les fichiers les plus r√©cents pour chaque source de donn√©es."""
    latest_files = {}
    
    # Rechercher les fichiers CSV du jour
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    for file in RAW_DIR.glob(f"*_{today}.csv"):
        prefix = file.name.split("_")[0]
        latest_files[prefix] = file
    
    logger.info(f"Fichiers √† traiter: {latest_files}")
    return latest_files

def process_csv(file_path, output_prefix):
    """Traite un fichier CSV avec des fonctionnalit√©s avanc√©es."""
    try:
        logger.info(f"Traitement du fichier CSV: {file_path}")
        
        # V√©rifier la taille du fichier
        file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
        logger.info(f"Taille du fichier: {file_size_mb:.2f} MB")
        
        # Strat√©gie adaptative selon la taille du fichier
        if file_size_mb > 100:
            logger.warning(f"Le fichier est tr√®s volumineux ({file_size_mb:.2f} MB), limitation √† 1 million de lignes")
            # √âchantillonnage pour gros fichiers
            chunk_size = 1000  # Taille de chaque chunk
            total_rows = 0
            chunks = []
            
            # Charger les donn√©es par chunks
            for chunk in pd.read_csv(file_path, chunksize=chunk_size, sep=None, engine='python'):
                chunks.append(chunk)
                total_rows += len(chunk)
                if total_rows >= 1000000:  # Limiter √† 1 million de lignes
                    break
            
            df = pd.concat(chunks, ignore_index=True)
            logger.info(f"Chargement de {len(df)} lignes par √©chantillonnage")
        else:
            # Pour fichiers plus petits, chargement complet
            try:
                df = pd.read_csv(file_path, sep=',')
            except:
                try:
                    df = pd.read_csv(file_path, sep=';')
                except:
                    df = pd.read_csv(file_path, sep=None, engine='python')
            
            # Limitation pour fichiers moyens
            if len(df) > 10000:
                df = df.sample(n=10000, random_state=42)
                logger.info(f"√âchantillonnage al√©atoire de 10000 lignes")
        
        # Informations de base
        row_count = len(df)
        col_count = len(df.columns)
        logger.info(f"Dimensions: {row_count} lignes, {col_count} colonnes")
        
        # D√©tecter les types de colonnes
        numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
        categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
        date_cols = []
        
        # Tenter de convertir des colonnes en dates
        for col in categorical_cols[:]:
            try:
                df[col] = pd.to_datetime(df[col])
                categorical_cols.remove(col)
                date_cols.append(col)
                logger.info(f"Colonne convertie en date: {col}")
            except:
                pass
        
        # Statistiques avanc√©es pour les colonnes num√©riques
        if numeric_cols:
            stats_file = PROCESSED_DIR / f"{output_prefix}_stats.csv"
            stats = df[numeric_cols].describe(percentiles=[0.05, 0.25, 0.5, 0.75, 0.95])
            stats.to_csv(stats_file)
            logger.info(f"Statistiques d√©taill√©es enregistr√©es dans {stats_file}")
            
            # Corr√©lations
            if len(numeric_cols) > 1:
                corr_file = PROCESSED_DIR / f"{output_prefix}_correlations.csv"
                corr = df[numeric_cols].corr()
                corr.to_csv(corr_file)
                logger.info(f"Matrice de corr√©lation enregistr√©e dans {corr_file}")
                
                # Visualisation des corr√©lations
                plt.figure(figsize=(12, 10))
                sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1, fmt='.2f')
                plt.title(f"Matrice de corr√©lation - {output_prefix}")
                corr_chart_file = REPORT_DIR / f"{output_prefix}_correlation_heatmap.png"
                plt.savefig(corr_chart_file, bbox_inches='tight')
                plt.close()
                logger.info(f"Heatmap de corr√©lation enregistr√© dans {corr_chart_file}")
            
            # Visualisations plus avanc√©es
            for col in numeric_cols[:3]:  # Limiter √† 3 colonnes pour √©viter trop de graphiques
                # Histogramme avec KDE
                plt.figure(figsize=(12, 6))
                sns.histplot(df[col], kde=True)
                plt.title(f"Distribution de {col}")
                hist_file = REPORT_DIR / f"{output_prefix}_{col}_histogram.png"
                plt.savefig(hist_file)
                plt.close()
                logger.info(f"Histogramme enregistr√© pour {col}")
                
                # Boxplot
                plt.figure(figsize=(10, 6))
                sns.boxplot(x=df[col])
                plt.title(f"Boxplot de {col}")
                box_file = REPORT_DIR / f"{output_prefix}_{col}_boxplot.png"
                plt.savefig(box_file)
                plt.close()
        
        # Pour les colonnes cat√©gorielles
        if categorical_cols:
            for col in categorical_cols[:3]:  # Limiter √† 3 colonnes
                # Compter les valeurs
                value_counts = df[col].value_counts().head(20)  # Top 20 valeurs
                
                # Barplot
                plt.figure(figsize=(12, 8))
                sns.barplot(x=value_counts.index, y=value_counts.values)
                plt.title(f"Top 20 valeurs pour {col}")
                plt.xticks(rotation=45, ha='right')
                cat_file = REPORT_DIR / f"{output_prefix}_{col}_categories.png"
                plt.savefig(cat_file, bbox_inches='tight')
                plt.close()
        
        # Pour les colonnes de date
        if date_cols:
            for col in date_cols:
                # Agr√©ger par mois
                try:
                    df['month'] = df[col].dt.to_period('M')
                    monthly_counts = df.groupby('month').size()
                    
                    # Tracer l'√©volution temporelle
                    plt.figure(figsize=(12, 6))
                    monthly_counts.plot(kind='line', marker='o')
                    plt.title(f"√âvolution temporelle par mois ({col})")
                    time_file = REPORT_DIR / f"{output_prefix}_{col}_timeline.png"
                    plt.savefig(time_file)
                    plt.close()
                    logger.info(f"Graphique temporel enregistr√© pour {col}")
                except Exception as e:
                    logger.warning(f"Impossible de cr√©er le graphique temporel pour {col}: {str(e)}")
        
        # Enregistrer une version nettoy√©e
        clean_file = PROCESSED_DIR / f"{output_prefix}_clean.csv"
        df.to_csv(clean_file, index=False)
        logger.info(f"Fichier nettoy√© enregistr√© dans {clean_file}")
        
        return {
            "fichier": str(file_path),
            "lignes": row_count,
            "colonnes": col_count,
            "colonnes_numeriques": numeric_cols,
            "colonnes_categorielles": categorical_cols,
            "colonnes_dates": date_cols,
            "fichiers_sortie": [str(stats_file), str(clean_file)]
        }
    
    except Exception as e:
        logger.error(f"Erreur lors du traitement du fichier CSV {file_path}: {str(e)}")
        return {"erreur": str(e)}

def generate_report(results):
    """G√©n√®re un rapport am√©lior√© en HTML."""
    try:
        # Cr√©er un r√©sum√© en HTML
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Rapport avanc√© de traitement des donn√©es - {today}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; color: #333; }}
                h1 {{ color: #2c3e50; text-align: center; margin-bottom: 30px; }}
                h2 {{ color: #3498db; margin-top: 30px; border-bottom: 1px solid #ddd; padding-bottom: 10px; }}
                h3 {{ color: #2980b9; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; box-shadow: 0 2px 3px rgba(0,0,0,0.1); }}
                th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
                th {{ background-color: #f2f2f2; color: #333; font-weight: bold; }}
                tr:nth-child(even) {{ background-color: #f9f9f9; }}
                tr:hover {{ background-color: #f1f1f1; }}
                .error {{ color: #e74c3c; }}
                .success {{ color: #27ae60; }}
                .chart-container {{ display: flex; flex-wrap: wrap; justify-content: space-around; margin: 20px 0; }}
                .chart {{ margin: 10px; border: 1px solid #ddd; padding: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); max-width: 45%; }}
                .chart img {{ max-width: 100%; height: auto; }}
                .summary {{ background-color: #f8f9fa; border-left: 5px solid #3498db; padding: 15px; margin: 20px 0; }}
                footer {{ text-align: center; margin-top: 50px; font-size: 0.9em; color: #7f8c8d; border-top: 1px solid #eee; padding-top: 20px; }}
            </style>
        </head>
        <body>
            <h1>Rapport avanc√© de traitement des donn√©es - {today}</h1>
            
            <div class="summary">
                <p><strong>Nombre de fichiers trait√©s:</strong> {len(results)}</p>
                <p><strong>Date du traitement:</strong> {datetime.datetime.now().strftime("%Y-%m-%d √† %H:%M:%S")}</p>
                <p><strong>Statut g√©n√©ral:</strong> {'Succ√®s' if not any('erreur' in r for r in results) else 'Attention: Certains fichiers ont des erreurs'}</p>
            </div>
            
            <h2>R√©sultats d√©taill√©s par fichier</h2>
            <table>
                <tr>
                    <th>Source</th>
                    <th>Lignes</th>
                    <th>Colonnes</th>
                    <th>Colonnes num√©riques</th>
                    <th>Colonnes cat√©gorielles</th>
                    <th>Colonnes de dates</th>
                    <th>Statut</th>
                </tr>
        """
        
        for result in results:
            source = Path(result.get("fichier", "")).stem.split("_")[0] if "fichier" in result else "Inconnu"
            if "erreur" in result:
                html += f"""
                <tr>
                    <td>{source}</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td class="error">Erreur: {result["erreur"]}</td>
                </tr>
                """
            else:
                html += f"""
                <tr>
                    <td>{source}</td>
                    <td>{result.get("lignes", "-")}</td>
                    <td>{result.get("colonnes", "-")}</td>
                    <td>{len(result.get("colonnes_numeriques", []))}</td>
                    <td>{len(result.get("colonnes_categorielles", []))}</td>
                    <td>{len(result.get("colonnes_dates", []))}</td>
                    <td class="success">Succ√®s</td>
                </tr>
                """
        
        html += """
            </table>
            
            <h2>Visualisations g√©n√©r√©es</h2>
            <p>Voici les graphiques g√©n√©r√©s pendant l'analyse:</p>
            <div class="chart-container">
        """
        
        # Lister et inclure les graphiques directement
        charts = list(REPORT_DIR.glob(f"*_correlation_heatmap.png"))
        charts.extend(list(REPORT_DIR.glob(f"*_*_histogram.png")))
        charts.extend(list(REPORT_DIR.glob(f"*_*_timeline.png")))
        charts.extend(list(REPORT_DIR.glob(f"*_*_boxplot.png")))
        charts.extend(list(REPORT_DIR.glob(f"*_chart.png")))
        
        for chart_file in charts:
            chart_name = chart_file.name
            source = chart_name.split("_")[0]
            
            html += f"""
            <div class="chart">
                <h3>{source} - {chart_name}</h3>
                <img src="{chart_name}" alt="{chart_name}" />
            </div>
            """
        
        html += """
            </div>
            
            <footer>
                <p>Rapport g√©n√©r√© automatiquement par le syst√®me avanc√© de traitement de donn√©es le """ + datetime.datetime.now().strftime("%Y-%m-%d √† %H:%M:%S") + """</p>
            </footer>
        </body>
        </html>
        """
        
        # Enregistrer le rapport HTML
        report_file = REPORT_DIR / f"rapport_avance_{today}.html"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(html)
        
        logger.info(f"Rapport HTML avanc√© g√©n√©r√©: {report_file}")
        return report_file
    
    except Exception as e:
logger.error(f"Erreur lors de la g√©n√©ration du rapport avanc√©: {str(e)}")
        return None

def main():
    """Fonction principale."""
    logger.info("=== D√©but du traitement avanc√© des donn√©es ===")
    
    # R√©cup√©rer les fichiers les plus r√©cents
    latest_files = get_latest_files()
    
    if not latest_files:
        logger.warning("Aucun fichier √† traiter trouv√©.")
        return 1
    
    results = []
    
    # Traiter chaque fichier
    for prefix, file_path in latest_files.items():
        result = process_csv(file_path, prefix)
        results.append(result)
    
    # G√©n√©rer le rapport
    report_file = generate_report(results)
    
    if report_file:
        logger.info(f"Traitement avanc√© termin√© avec succ√®s. Rapport: {report_file}")
    else:
        logger.error("√âchec de la g√©n√©ration du rapport avanc√©")
        return 1
    
    logger.info("=== Fin du traitement avanc√© des donn√©es ===")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
EOF
    
    chmod +x "$PROCESSING_SCRIPT"
    echo "‚úÖ Script de traitement avanc√© cr√©√©: $PROCESSING_SCRIPT" | tee -a "$LOG_FILE"
    return 0
}

# === CONFIGURATION GIT ===
setup_git() {
    show_figlet "Git Setup"
    echo "--- Configuration du versionning Git ---" | tee -a "$LOG_FILE"
    
    if [ "$GIT_ENABLED" = true ]; then
        # V√©rifier si le r√©pertoire est un d√©p√¥t Git
        if [ ! -d ".git" ]; then
            echo "Initialisation du d√©p√¥t Git..." | tee -a "$LOG_FILE"
            git init || handle_error "Git init" "Impossible d'initialiser le d√©p√¥t Git"
        fi
        
        # V√©rifier s'il y a des modifications non commit√©es
        if git diff --quiet; then
            echo "‚úÖ Aucune modification non commit√©e d√©tect√©e" | tee -a "$LOG_FILE"
        else
            echo "‚ö†Ô∏è Modifications non commit√©es d√©tect√©es" | tee -a "$LOG_FILE"
            # Auto-commit des modifications actuelles avant de changer de branche
            git add . || handle_error "Git add" "Impossible d'ajouter les modifications actuelles"
            git commit -m "Auto-commit avant traitement de donn√©es: $DATE" || handle_error "Git commit" "Impossible de committer les modifications actuelles"
            echo "‚úÖ Modifications actuelles commit√©es" | tee -a "$LOG_FILE"
        fi
        
        # Cr√©er ou utiliser la branche de donn√©es
        if git show-ref --verify --quiet "refs/heads/$GIT_BRANCH"; then
            git checkout "$GIT_BRANCH" || handle_error "Git checkout" "Impossible de passer √† la branche $GIT_BRANCH"
            echo "‚úÖ Passage √† la branche existante: $GIT_BRANCH" | tee -a "$LOG_FILE"
        else
            git checkout -b "$GIT_BRANCH" || handle_error "Git branch" "Impossible de cr√©er la branche $GIT_BRANCH"
            echo "‚úÖ Cr√©ation et passage √† la nouvelle branche: $GIT_BRANCH" | tee -a "$LOG_FILE"
        fi
    else
        echo "‚ö†Ô∏è Git non disponible, √©tape de versionning ignor√©e" | tee -a "$LOG_FILE"
    fi
}

# === 1. T√âL√âCHARGEMENT DES DONN√âES ===
download_data() {
    show_figlet "Download"
    echo "=== √âTAPE 1: T√âL√âCHARGEMENT DES DONN√âES ===" | tee -a "$LOG_FILE"
    
    # Sources de donn√©es ouvertes l√©g√®res
    # Format: NOM|URL|TYPE_FICHIER
    SOURCES=(
        "METEO_FRANCE|https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/donnees-synop-essentielles-omm/exports/csv?limit=100|CSV"
        "OPEN_METEO|https://open-meteo.com/en/docs/historical-weather-api/stationdata/paris/download.csv?start_date=2023-01-01&end_date=2023-01-31|CSV"
        "DONNEES_ECO|https://www.data.gouv.fr/fr/datasets/r/7fc346b1-1894-44e5-ba96-f73977776260|CSV"
    )
    
    echo "üì• T√©l√©chargement de ${#SOURCES[@]} sources de donn√©es" | tee -a "$LOG_FILE"
    
    for SOURCE in "${SOURCES[@]}"; do
        IFS='|' read -r NAME URL TYPE <<< "$SOURCE"
        
        echo "‚è≥ T√©l√©chargement de $NAME depuis $URL" | tee -a "$LOG_FILE"
        
        OUTPUT_FILE="$RAW_DIR/${NAME}_${DATE}.${TYPE,,}"
        
        # T√©l√©charger avec timeout et retry
        if curl -s -L --retry 3 --max-time 30 -o "$OUTPUT_FILE" "$URL"; then
            # V√©rifier si le fichier est vide
            if [ -s "$OUTPUT_FILE" ]; then
                SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
                echo "‚úÖ T√©l√©chargement r√©ussi: $OUTPUT_FILE ($SIZE)" | tee -a "$LOG_FILE"
                
                # Ajouter m√©tadonn√©es
                echo "# Donn√©es t√©l√©charg√©es le: $DATE" > "$OUTPUT_FILE.meta"
                echo "# Source: $URL" >> "$OUTPUT_FILE.meta"
                echo "# Type: $TYPE" >> "$OUTPUT_FILE.meta"
                
                # Pour CSV, aper√ßu
                if [[ "${TYPE,,}" == "csv" ]]; then
                    echo "üìä Aper√ßu des donn√©es (3 premi√®res lignes):" | tee -a "$LOG_FILE"
                    head -n 3 "$OUTPUT_FILE" | tee -a "$LOG_FILE"
                fi
                
                # Hash pour v√©rification
                SHA=$(sha256sum "$OUTPUT_FILE" | cut -d' ' -f1)
                echo "$SHA" > "$OUTPUT_FILE.sha256"
            else
                echo "‚ùå Fichier t√©l√©charg√© vide: $NAME" | tee -a "$LOG_FILE"
                rm -f "$OUTPUT_FILE"
            fi
        else
            echo "‚ùå √âchec du t√©l√©chargement de $NAME" | tee -a "$LOG_FILE"
        fi
    done
    
    # Compter les fichiers t√©l√©charg√©s avec succ√®s
    DOWNLOADED_COUNT=$(find "$RAW_DIR" -type f -name "*_${DATE}.csv" | wc -l)
    
    if [ "$DOWNLOADED_COUNT" -eq 0 ]; then
        handle_error "T√©l√©chargement" "Aucun fichier n'a pu √™tre t√©l√©charg√©"
    else
        echo "‚úÖ $DOWNLOADED_COUNT fichiers t√©l√©charg√©s avec succ√®s" | tee -a "$LOG_FILE"
    fi
}

# === 2. TRAITEMENT DES DONN√âES ===
process_data() {
    show_figlet "Processing"
    echo "=== √âTAPE 2: TRAITEMENT AVANC√â DES DONN√âES MASSIVES ===" | tee -a "$LOG_FILE"
    
    echo "üîÑ Lancement du script de traitement Python avanc√©..." | tee -a "$LOG_FILE"
    
    # Cr√©er le script de traitement s'il n'existe pas d√©j√†
    if [ ! -f "$SCRIPT_DIR/process_data_advanced.py" ]; then
        create_processing_script
    fi
    
    # Ex√©cuter le script
    python3 "$SCRIPT_DIR/process_data_advanced.py"
    PYTHON_EXIT_CODE=$?
    
    # V√©rifier le r√©sultat
    if [ $PYTHON_EXIT_CODE -ne 0 ]; then
        handle_error "Traitement" "Le script Python avanc√© a √©chou√© avec le code d'erreur $PYTHON_EXIT_CODE"
    else
        echo "‚úÖ Traitement avanc√© des donn√©es termin√© avec succ√®s" | tee -a "$LOG_FILE"
    fi
}

# === 3. G√âN√âRATION DE RAPPORT ===
generate_summary() {
    show_figlet "Report"
    echo "=== √âTAPE 3: G√âN√âRATION DU RAPPORT AVANC√â ===" | tee -a "$LOG_FILE"
    
    # Chercher d'abord le rapport avanc√©
    echo "Recherche du rapport avanc√©..." | tee -a "$LOG_FILE"
    REPORT_HTML=$(find "$REPORT_DIR" -name "rapport_avance_$DATE.html")

    # Si le rapport avanc√© n'est pas trouv√©, chercher le rapport standard
    if [ -z "$REPORT_HTML" ] || [ ! -f "$REPORT_HTML" ]; then
        echo "‚ö†Ô∏è Rapport avanc√© non trouv√©, recherche d'un rapport standard..." | tee -a "$LOG_FILE"
        REPORT_HTML=$(find "$REPORT_DIR" -name "rapport_$DATE.html")
    fi

    # Afficher le contenu du r√©pertoire pour le d√©bogage
    echo "üìÇ Contenu du r√©pertoire des rapports:" | tee -a "$LOG_FILE"
    ls -la "$REPORT_DIR" | tee -a "$LOG_FILE"

    # V√©rifier si un rapport a √©t√© trouv√©
    if [ -z "$REPORT_HTML" ] || [ ! -f "$REPORT_HTML" ]; then
        handle_error "Rapport" "Aucun rapport n'a √©t√© g√©n√©r√©"
    else
        echo "‚úÖ Rapport trouv√©: $REPORT_HTML" | tee -a "$LOG_FILE"
    fi
    
    # Compter les fichiers
    RAW_COUNT=$(find "$RAW_DIR" -type f -name "*.$DATE.*" | wc -l)
    PROCESSED_COUNT=$(find "$PROCESSED_DIR" -type f -mtime -1 | wc -l)
    CHART_COUNT=$(find "$REPORT_DIR" -type f -name "*.png" -mtime -1 | wc -l)
    
    # Cr√©er un r√©sum√©
    SUMMARY=$(cat << EOF
==========================================================
           R√âSUM√â DU TRAITEMENT DE DONN√âES
==========================================================
üìÖ Date d'ex√©cution: $DATE √† $(date '+%H:%M:%S')
üë§ Ex√©cut√© par: $(whoami)

üìä STATISTIQUES:
----------------------------------------------------------
üì• Fichiers bruts t√©l√©charg√©s:       $RAW_COUNT
üßπ Fichiers trait√©s g√©n√©r√©s:         $PROCESSED_COUNT
üìà Graphiques g√©n√©r√©s:               $CHART_COUNT
üìÑ Rapport principal:                $REPORT_HTML

üìÇ EMPLACEMENTS:
----------------------------------------------------------
üìä Donn√©es brutes:                   $RAW_DIR
üìà Donn√©es trait√©es:                 $PROCESSED_DIR
üìë Rapports et graphiques:           $REPORT_DIR
üìù Logs:                             $LOG_DIR

Pour consulter le rapport complet, ouvrez:
$REPORT_HTML
==========================================================
EOF
)
    
    echo "$SUMMARY" | tee -a "$LOG_FILE"
    
    # Enregistrer le r√©sum√© dans un fichier
    SUMMARY_FILE="$REPORT_DIR/resume_$DATE.txt"
    echo "$SUMMARY" > "$SUMMARY_FILE"
    
    echo "‚úÖ R√©sum√© g√©n√©r√© et enregistr√© dans $SUMMARY_FILE" | tee -a "$LOG_FILE"
    
    return 0
}

# === 4. VERSIONNING GIT ===
commit_to_git() {
    show_figlet "Git Update"
    echo "=== √âTAPE 4: VERSIONNING GIT ===" | tee -a "$LOG_FILE"
    
    if [ "$GIT_ENABLED" = true ]; then
        echo "üì¶ Ajout des fichiers au suivi Git" | tee -a "$LOG_FILE"
        
        # Ajouter les fichiers au suivi Git
        git add "$LOG_DIR" 
        git add "$DATA_DIR/processed"
        git add "$DATA_DIR/reports"
        git add "$DATA_DIR/raw/*.meta" 
        git add "$DATA_DIR/raw/*.sha256"
        
        # V√©rifier s'il y a des changements √† committer
        if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è Aucun changement √† committer" | tee -a "$LOG_FILE"
        else
            echo "üíæ Commit des changements" | tee -a "$LOG_FILE"
            git commit -m "Mise √† jour des donn√©es: $DATE - Ex√©cution automatique" || {
                echo "‚ö†Ô∏è Erreur lors du commit Git" | tee -a "$LOG_FILE"
            }
            
            # Push vers le d√©p√¥t distant (si configur√©)
            if git remote | grep -q "origin"; then
                echo "üîÑ Push des changements vers le d√©p√¥t distant" | tee -a "$LOG_FILE"
                git push origin "$GIT_BRANCH" || {
                    echo "‚ö†Ô∏è √âchec du push vers origin" | tee -a "$LOG_FILE"
                }
            else
                echo "‚ÑπÔ∏è Aucun d√©p√¥t distant configur√©" | tee -a "$LOG_FILE"
            fi
        fi
    else
        echo "‚ö†Ô∏è Git non disponible, √©tape de versionning ignor√©e" | tee -a "$LOG_FILE"
    fi
}

# === 5. NOTIFICATION ===
send_notification() {
    show_figlet "Notify"
    echo "=== √âTAPE 5: ENVOI DE NOTIFICATION AVEC VISUALISATIONS ===" | tee -a "$LOG_FILE"
    
    # Compter les fichiers
    RAW_COUNT=$(find "$RAW_DIR" -type f -name "*.$DATE.*" | wc -l)
    PROCESSED_COUNT=$(find "$PROCESSED_DIR" -type f -mtime -1 | wc -l)
    CHART_COUNT=$(find "$REPORT_DIR" -type f -name "*.png" -mtime -1 | wc -l)
    
    # Cr√©er le message de notification
    local MESSAGE="
‚úÖ Le traitement de donn√©es du $DATE s'est termin√© avec succ√®s.

R√©sum√©:
- $RAW_COUNT fichiers de donn√©es t√©l√©charg√©s
- $PROCESSED_COUNT fichiers trait√©s g√©n√©r√©s
- $CHART_COUNT graphiques g√©n√©r√©s
    
Le rapport complet est disponible dans: $REPORT_DIR
"
    
    # Envoyer notification Discord
    notify_discord "$MESSAGE" "Traitement de donn√©es r√©ussi - $DATE"
    
    echo "üìß Notification envoy√©e" | tee -a "$LOG_FILE"
}

# === EX√âCUTION PRINCIPALE ===
main() {
    # √âtape 0: Configuration Git (si disponible)
    setup_git
    
    # √âtape 1: T√©l√©charger les donn√©es
    download_data
    
    # √âtape 2: Traiter les donn√©es
    process_data
    
    # √âtape 3: G√©n√©rer le rapport final
    generate_summary
    
    # √âtape 4: Versionning Git
    commit_to_git
    
    # √âtape 5: Envoyer la notification
    send_notification
    
    # Terminer
    show_figlet "Success"
    echo "===== FIN DU PROCESSUS COMPLET: $(date '+%Y-%m-%d %H:%M:%S') =====" | tee -a "$LOG_FILE"
    echo "‚úÖ Processus termin√© avec succ√®s"
    echo "üìÑ Pour plus de d√©tails, consultez les logs: $LOG_FILE"
    echo "üìä Rapport HTML: $REPORT_DIR/rapport_avance_$DATE.html"
    
    return 0
}

# Lancer l'ex√©cution principale
main